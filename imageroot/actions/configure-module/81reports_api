#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

"""
This file is created with separation of resposability in mind.
This configures API segment of reports.
"""

import json
import sys
import os

import agent

# Create folder scaffolding
os.makedirs('report', exist_ok=True)

# Fetch request
request = json.load(sys.stdin)

# Set environment variables
agent.set_env(
    'REPORTS_INTERNATIONAL_PREFIX',
    request['reports_international_prefix']
)

# Create configuration file
reports_config = {
    'listen_address': '0.0.0.0:' + os.getenv('REPORTS_API_PORT'),
    'redis_network_type': 'tcp',
    'redis_address': '127.0.0.1:' + os.getenv('REPORTS_REDIS_PORT'),
    'ttl_cache': 480,
    'cdr_database': {
        'host': '127.0.0.1',
        'port': os.getenv('NETHVOICE_MARIADB_PORT'),
        'user': 'nethvoice_report',
        'password': os.getenv('REPORTS_PASSWORD'),
        'name': 'asteriskcdrdb'
    },
    'phonebook_database': {
        'host': '127.0.0.1',
        'port': os.getenv('NETHVOICE_MARIADB_PORT'),
        'user': 'nethvoice_report',
        'password': os.getenv('REPORTS_PASSWORD'),
        'name': 'phonebook'
    },
    'freepbx_database': {
        'host': '127.0.0.1',
        'port': os.getenv('NETHVOICE_MARIADB_PORT'),
        'user': 'nethvoice_report',
        'password': os.getenv('REPORTS_PASSWORD'),
        'name': 'asterisk'
    },
    'secret': os.getenv('REPORTS_SECRET'),
    'query_path': '/opt/nethvoice-report/api/queries',
    'template_path': '/opt/nethvoice-report/api/templates',
    'values_path': '/opt/nethvoice-report/api/values',
    'views_path': '/opt/nethvoice-report/api/views',
    'phonebook_path': '/opt/nethvoice-report/api/phonebook/phonebook.sql',
    'rrd_path': '/var/lib/collectd/rrd',
    'user_auth_file': '/opt/nethvoice-report/api/user_authorizations.json',
    'default_filter': {
        'queues': [],
        'groups': [],
        'time': {
            'group': 'day',
            'division': '60',
            'range': 'yesterday',
            'cdrDashboardRange': 'past_week',
            'interval': {
                'start': '',
                'end': ''
            }
        },
        'name': '',
        'agent': '',
        'geoGroup': 'regione'
    },
    'api_endpoint': '',
    'api_key': os.getenv('REPORTS_API_KEY'),
    'settings': {
        'start_hour': '09:00',
        'end_hour': '18:00',
        'query_limit': '2000',
        'null_call_time': '5',
        'destinations': [
            'National',
            'Mobile',
            'International',
            'Emergency',
            'PayNumber'
        ],
        'call_patterns': [
            {
                'prefix': '00390',
                'destination': 'National'
            },
            {
                'prefix': '+390',
                'destination': 'National'
            },
            {
                'prefix': '0',
                'destination': 'National'
            },
            {
                'prefix': '00393',
                'destination': 'Mobile'
            },
            {
                'prefix': '+393',
                'destination': 'Mobile'
            },
            {
                'prefix': '3',
                'destination': 'Mobile'
            },
            {
                'prefix': '00',
                'destination': 'International'
            },
            {
                'prefix': '+',
                'destination': 'International'
            },
            {
                'prefix': '1',
                'destination': 'Emergency'
            },
            {
                'prefix': '8',
                'destination': 'PayNumber'
            }
        ],
        'currency': 'EUR',
        'costs': []
    }
}

with open('./report/conf.json', 'w', encoding='utf-8') as file:
    json.dump(reports_config, file, ensure_ascii=False)


# Setup traefik routes
# api endpoint
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'] + '-report-api',
        'url': 'http://127.0.0.1:' + os.environ["REPORTS_API_PORT"],
        'http2https':  os.environ["TRAEFIK_HTTP2HTTPS"] == "True",
        'lets_encrypt': os.environ["TRAEFIK_LETS_ENCRYPT"] == "True",
        'host': os.environ["NETHVOICE_HOST"],
        'path': '/pbx-report/api'
    },
)
agent.assert_exp(response['exit_code'] == 0)

# Enable service and restart
agent.run_helper(
    'systemctl',
    '--user',
    'enable',
    'report-api.service'
).check_returncode()
agent.run_helper(
    'systemctl',
    '--user',
    'restart',
    'report-api.service'
).check_returncode()
